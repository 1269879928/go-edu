// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package conf

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson6615c02eDecodeGoEduConf(in *jlexer.Lexer, out *Redis) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "host":
			out.Host = string(in.String())
		case "port":
			out.Port = int64(in.Int64())
		case "auth":
			out.Auth = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6615c02eEncodeGoEduConf(out *jwriter.Writer, in Redis) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"host\":"
		out.RawString(prefix[1:])
		out.String(string(in.Host))
	}
	{
		const prefix string = ",\"port\":"
		out.RawString(prefix)
		out.Int64(int64(in.Port))
	}
	{
		const prefix string = ",\"auth\":"
		out.RawString(prefix)
		out.String(string(in.Auth))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Redis) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6615c02eEncodeGoEduConf(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Redis) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6615c02eEncodeGoEduConf(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Redis) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6615c02eDecodeGoEduConf(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Redis) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6615c02eDecodeGoEduConf(l, v)
}
func easyjson6615c02eDecodeGoEduConf1(in *jlexer.Lexer, out *Qiniu) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "access_key":
			out.AccessKey = string(in.String())
		case "secret_key":
			out.SecretKey = string(in.String())
		case "bucket":
			out.Bucket = string(in.String())
		case "domain":
			out.Domain = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6615c02eEncodeGoEduConf1(out *jwriter.Writer, in Qiniu) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"access_key\":"
		out.RawString(prefix[1:])
		out.String(string(in.AccessKey))
	}
	{
		const prefix string = ",\"secret_key\":"
		out.RawString(prefix)
		out.String(string(in.SecretKey))
	}
	{
		const prefix string = ",\"bucket\":"
		out.RawString(prefix)
		out.String(string(in.Bucket))
	}
	{
		const prefix string = ",\"domain\":"
		out.RawString(prefix)
		out.String(string(in.Domain))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Qiniu) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6615c02eEncodeGoEduConf1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Qiniu) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6615c02eEncodeGoEduConf1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Qiniu) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6615c02eDecodeGoEduConf1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Qiniu) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6615c02eDecodeGoEduConf1(l, v)
}
func easyjson6615c02eDecodeGoEduConf2(in *jlexer.Lexer, out *Oss) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "access_key_id":
			out.AccessKeyId = string(in.String())
		case "access_key_secret":
			out.AccessKeySecret = string(in.String())
		case "region_id":
			out.RegionId = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6615c02eEncodeGoEduConf2(out *jwriter.Writer, in Oss) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"access_key_id\":"
		out.RawString(prefix[1:])
		out.String(string(in.AccessKeyId))
	}
	{
		const prefix string = ",\"access_key_secret\":"
		out.RawString(prefix)
		out.String(string(in.AccessKeySecret))
	}
	{
		const prefix string = ",\"region_id\":"
		out.RawString(prefix)
		out.String(string(in.RegionId))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Oss) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6615c02eEncodeGoEduConf2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Oss) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6615c02eEncodeGoEduConf2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Oss) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6615c02eDecodeGoEduConf2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Oss) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6615c02eDecodeGoEduConf2(l, v)
}
func easyjson6615c02eDecodeGoEduConf3(in *jlexer.Lexer, out *Mysql) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "host":
			out.Host = string(in.String())
		case "port":
			out.Port = int64(in.Int64())
		case "username":
			out.Username = string(in.String())
		case "password":
			out.Password = string(in.String())
		case "database":
			out.Database = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6615c02eEncodeGoEduConf3(out *jwriter.Writer, in Mysql) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"host\":"
		out.RawString(prefix[1:])
		out.String(string(in.Host))
	}
	{
		const prefix string = ",\"port\":"
		out.RawString(prefix)
		out.Int64(int64(in.Port))
	}
	{
		const prefix string = ",\"username\":"
		out.RawString(prefix)
		out.String(string(in.Username))
	}
	{
		const prefix string = ",\"password\":"
		out.RawString(prefix)
		out.String(string(in.Password))
	}
	{
		const prefix string = ",\"database\":"
		out.RawString(prefix)
		out.String(string(in.Database))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Mysql) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6615c02eEncodeGoEduConf3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Mysql) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6615c02eEncodeGoEduConf3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Mysql) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6615c02eDecodeGoEduConf3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Mysql) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6615c02eDecodeGoEduConf3(l, v)
}
func easyjson6615c02eDecodeGoEduConf4(in *jlexer.Lexer, out *Jwt) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "key":
			out.Key = string(in.String())
		case "expires":
			out.Expires = int64(in.Int64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6615c02eEncodeGoEduConf4(out *jwriter.Writer, in Jwt) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"key\":"
		out.RawString(prefix[1:])
		out.String(string(in.Key))
	}
	{
		const prefix string = ",\"expires\":"
		out.RawString(prefix)
		out.Int64(int64(in.Expires))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Jwt) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6615c02eEncodeGoEduConf4(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Jwt) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6615c02eEncodeGoEduConf4(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Jwt) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6615c02eDecodeGoEduConf4(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Jwt) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6615c02eDecodeGoEduConf4(l, v)
}
func easyjson6615c02eDecodeGoEduConf5(in *jlexer.Lexer, out *Config) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "mysql":
			(out.Mysql).UnmarshalEasyJSON(in)
		case "redis":
			(out.Redis).UnmarshalEasyJSON(in)
		case "jwt":
			(out.Jwt).UnmarshalEasyJSON(in)
		case "oss":
			(out.Oss).UnmarshalEasyJSON(in)
		case "qiniu":
			(out.Qiniu).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6615c02eEncodeGoEduConf5(out *jwriter.Writer, in Config) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"mysql\":"
		out.RawString(prefix[1:])
		(in.Mysql).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"redis\":"
		out.RawString(prefix)
		(in.Redis).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"jwt\":"
		out.RawString(prefix)
		(in.Jwt).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"oss\":"
		out.RawString(prefix)
		(in.Oss).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"qiniu\":"
		out.RawString(prefix)
		(in.Qiniu).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Config) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6615c02eEncodeGoEduConf5(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Config) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6615c02eEncodeGoEduConf5(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Config) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6615c02eDecodeGoEduConf5(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Config) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6615c02eDecodeGoEduConf5(l, v)
}
